name: AWS RESOURCES DESTRUCTION PIPELINE
on:
  workflow_dispatch:
   
jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Terraform Init
        run: terraform init -backend-config=../backend.hcl --reconfigure
        working-directory: ./aws_resources

      - name: Terraform Refresh (load state from remote)
        env:
          TF_VAR_api_key: ${{ secrets.API_KEY }}
          TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
        run: terraform refresh -input=false
        working-directory: ./aws_resources

      - name: Export Terraform Outputs (Athena Workgroup)
        id: tfoutputs
        working-directory: ./aws_resources
        run: |
          WG_NAME=$(terraform output -raw athena_workgroup_name 2>/dev/null || echo "")
          echo "ATHENA_WORKGROUP=$WG_NAME" >> $GITHUB_ENV
          echo "EXPORT -> $WG_NAME"

      - name: Delete Athena WorkGroup (Safe / Idempotent)
        if: env.ATHENA_WORKGROUP != ''
        run: |
          EXIST=$(aws athena list-work-groups --query "WorkGroups[?Name=='$ATHENA_WORKGROUP']" --output text)
          if [ -n "$EXIST" ]; then
            echo "WorkGroup $ATHENA_WORKGROUP exists - deleting..."
            aws athena delete-work-group \
              --work-group "$ATHENA_WORKGROUP" \
              --recursive-delete-option || true
          else
            echo "WorkGroup $ATHENA_WORKGROUP not found - skipped."
          fi

      - name: Export Terraform Outputs (Glue Crawler)
        working-directory: ./aws_resources
        run: |
          if terraform output -json | jq -e '.glue_crawler' >/dev/null 2>&1; then
            CRAWLER_NAME=$(terraform output -raw glue_crawler)
            echo "GLUE_CRAWLER=$CRAWLER_NAME" >> $GITHUB_ENV
            echo "Crawler found -> $CRAWLER_NAME"
          else
            echo "GLUE_CRAWLER=" >> $GITHUB_ENV
            echo "No GLUE_CRAWLER output found. Skipping."
          fi


      - name: Stop Glue Crawler (Safe / Idempotent)
        if: env.GLUE_CRAWLER != ''
        run: |
          STATUS=$(aws glue get-crawler --name "$GLUE_CRAWLER" --query "Crawler.State" --output text 2>/dev/null || echo "")
          if [ -n "$STATUS" ]; then
            echo "Crawler state: $STATUS"
            if [ "$STATUS" = "RUNNING" ]; then
              echo "Stopping crawler $GLUE_CRAWLER ..."
              aws glue stop-crawler --name "$GLUE_CRAWLER" || true
            else
              echo "Crawler not running. Nothing to stop."
            fi
          else
            echo "Crawler not found. Skipping."
          fi

            - name: Export Terraform Outputs (DataZone)
        working-directory: ./aws_resources
        run: |
          echo "DATAZONE_DOMAIN_ID=$(terraform output -raw datazone_domain_id)" >> $GITHUB_ENV
          echo "DATAZONE_PROJECT_ID=$(terraform output -raw datazone_project_id)" >> $GITHUB_ENV

      - name: Delete DataZone Environment (Safe / Idempotent)
        if: env.DATAZONE_PROJECT_ID != '' && env.DATAZONE_DOMAIN_ID != ''
        run: |
          ENV_ID=$(aws datazone list-environments \
            --domain-identifier "$DATAZONE_DOMAIN_ID" \
            --project-identifier "$DATAZONE_PROJECT_ID" \
            --region us-east-2 --query "items[0].id" --output text 2>/dev/null || echo "")
          
          if [ "$ENV_ID" != "None" ] && [ -n "$ENV_ID" ]; then
            echo "Deleting environment $ENV_ID..."
            aws datazone delete-environment \
              --domain-identifier "$DATAZONE_DOMAIN_ID" \
              --project-identifier "$DATAZONE_PROJECT_ID" \
              --identifier "$ENV_ID" \
              --region us-east-2 || true
          else
            echo "No environment found. Skipping."
          fi

      - name: Delete DataZone Environment Profile (Safe / Idempotent)
        if: env.DATAZONE_DOMAIN_ID != ''
        run: |
          PROFILE_ID=$(aws datazone list-environment-profiles \
            --domain-identifier "$DATAZONE_DOMAIN_ID" \
            --region us-east-2 --query "items[0].id" --output text 2>/dev/null || echo "")
          
          if [ "$PROFILE_ID" != "None" ] && [ -n "$PROFILE_ID" ]; then
            echo "Deleting environment profile $PROFILE_ID..."
            aws datazone delete-environment-profile \
              --domain-identifier "$DATAZONE_DOMAIN_ID" \
              --identifier "$PROFILE_ID" \
              --region us-east-2 || true
          else
            echo "No environment profile found. Skipping."
          fi

      - name: Delete DataZone Project (Safe / Idempotent)
        if: env.DATAZONE_PROJECT_ID != '' && env.DATAZONE_DOMAIN_ID != ''
        run: |
          echo "Deleting project $DATAZONE_PROJECT_ID..."
          aws datazone delete-project \
            --domain-identifier "$DATAZONE_DOMAIN_ID" \
            --identifier "$DATAZONE_PROJECT_ID" \
            --region us-east-2 || true


      - name: Terraform Plan
        env:
          TF_VAR_api_key: ${{ secrets.API_KEY }}
          TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
        run: terraform plan -out=tfplan -input=false
        working-directory: ./aws_resources

      - name: Terraform Destroy
        env:
          TF_VAR_api_key: ${{ secrets.API_KEY }}
          TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
        run: terraform destroy -auto-approve -input=false
        working-directory: ./aws_resources
